{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","onSearchChange","event","state","fetch","then","response","json","users","addGoodMonsters","console","log","unshift","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,YAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBAGb,yBAAKA,UAAU,gBAAgBC,IAAI,UAAUC,IAAG,mBAAcH,EAAMI,QAAQC,GAA5B,UAChD,wBAAIJ,UAAU,gBAAd,IAA+BD,EAAMI,QAAQE,KAA7C,KACA,uBAAGL,UAAU,iBAAb,IAA+BD,EAAMI,QAAQG,MAA7C,QCNSC,EAAW,SAACR,GAEvB,OACE,yBAAKC,UAAU,aAEXD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACzB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCP7BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCoFJG,G,kBArFb,aAAe,IAAD,8BACZ,+CA0CFH,aAAe,SAACI,GACd,EAAKC,SACH,CAACC,YAAaF,EAAEG,OAAOC,SA7Cb,EAmDdC,eAAiB,SAAAC,GACf,EAAKL,SAAS,CAAEC,YAAaI,EAAMH,OAAOC,SAjD1C,EAAKG,MAAQ,CACXhB,SAAU,GACVW,YAAa,IALH,E,iFAaO,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAAAC,GAEJA,EAASC,OACRF,MAAK,SAAAG,GAEJ,EAAKX,SACH,CAACV,SAAUqB,IACX,WACE,EAAKC,gBAAgB,EAAKN,MAAMhB,UAChCuB,QAAQC,IAAI,EAAKR,MAAMhB,UACvB,EAAKU,SAAS,CAACV,SAAU,EAAKgB,MAAMhB,sB,sCAQhCA,GAMdA,EAASyB,QAFa,CAAC3B,MAAO,2BAA4BF,GAAI,gBAAiBC,KAAM,iBADjE,CAACC,MAAO,yBAA0BF,GAAI,cAAeC,KAAM,eAD7D,CAACC,MAAO,uBAAwBF,GAAI,YAAaC,KAAM,aADnD,CAACC,MAAO,uBAAwBF,GAAI,eAAgBC,KAAM,mB,+BAsBzE,MAG2B6B,KAAKV,MAA/BhB,EAHD,EAGCA,SAAUW,EAHX,EAGWA,YAEZgB,EAAmB3B,EAAS4B,QAAQ,SAAAjC,GAAO,OAC/CA,EAAQE,KAAKgC,cAAcC,SAASnB,EAAYkB,kBAIlD,OACE,yBAAKrC,UAAU,OAEb,uBAAGA,UAAU,cAAb,yBAIA,kBAAC,EAAD,CACEY,YAAY,kBACZC,aAAgBqB,KAAKrB,eAGvB,kBAAC,EAAD,CAAUL,SAAU2B,S,GA/EVI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.98f549ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n//import * from '././././public/images';\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    {/* <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=100x100`} /> */}\r\n\r\n    <img className=\"monster-image\" alt=\"monster\" src={`./images/${props.monster.id}.jpg`} />\r\n    <h2 className='monster-name'> {props.monster.name} </h2> \r\n    <p className='monster-email'> {props.monster.email} </p>\r\n  </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n  //console.log(props);  //The parameters we pass into a CardList component\r\n  return (\r\n    <div className=\"card-list\">\r\n      {\r\n        props.monsters.map( monster => (\r\n          <Card key={monster.id} monster={monster}/>   \r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={ handleChange }\r\n    />\r\n)\r\n\r\n","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super(); // Calls to React.Component's constructor (each component is a class)\n\n    this.state = {\n      monsters: [],\n      searchField: '' \n    }\n\n    //this.handleChange = this.handleChange.bind(this);  // Must when non using error functions\n  }\n\n\n  // When React starting display the component\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        //console.log(response);\n        response.json()\n        .then(users => {\n          //console.log(users);\n          this.setState( \n            {monsters: users}, \n            () => {\n              this.addGoodMonsters(this.state.monsters);\n              console.log(this.state.monsters);\n              this.setState({monsters: this.state.monsters});\n            } \n          ); \n        })\n      });   \n  }\n\n\n  addGoodMonsters(monsters) {\n    const BREANDAN_EICH = {email: \"breneich@monster.com\", id: 'brendan-eich', name: 'Brendan Eich'};\n    const DAVID_LEV = {email: \"davidlev@monster.com\", id: 'david-lev', name: 'David Lev'};\n    const AMITAY_LEVI = {email: \"amitaylevi@monster.com\", id: 'amitay-levi', name: 'Amitay Levi'};\n    const ROYI_BERNTHAL = {email: \"royibernthal@monster.com\", id: 'royi-bernthal', name: 'Royi Bernthal'};\n\n    monsters.unshift(ROYI_BERNTHAL, AMITAY_LEVI, DAVID_LEV, BREANDAN_EICH);\n  }\n\n\n  handleChange = (e) => {\n    this.setState(\n      {searchField: e.target.value}, \n      //() => console.log(this.state)\n    ); \n  }\n\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value})\n  }\n\n\n  render() {\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter( monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    //console.log(filteredMonsters);\n\n    return (\n      <div className=\"App\">\n\n        <p className='app-header'> Developing Monsters </p>\n\n        {/* <SearchBox  onSearchChange={this.onSearchChange}/> */}\n\n        <SearchBox \n          placeholder='search monsters' \n          handleChange = {this.handleChange} \n        />\n\n        <CardList monsters={filteredMonsters} /> \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}